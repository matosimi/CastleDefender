; ********* MATOSIMI MACROS **********
; 26.07.2019
	 
.macro	add16 ' '
	lda :1
	add :2
	bcc x1
	inc :2+1
x1	sta :2
.endm

	 
.macro	sub16 ' '
	lda :2
	sub :1
	bcs x1
	dec :2+1
x1	sta :2
.endm

;adds (or subs) constant -128 to 127
.macro	add16sign ' '
	lda :1
	bmi x2
	add :2
	bcc x1
	inc :2+1
	jmp x1

x2	;eor #$ff ;inverse (to get positive value)

	add :2
	bcs x1
	dec :2+1
x1	sta :2
.endm

.macro	cmp16
	lda :1+1
	cmp :2+1
	bne x1
	lda :1
	cmp :2
x1
.endm

.macro	x_lt
	cpx :1
	bcc :2
.endm

.macro	x_ge
	cpx :1
	bcs :2
.endm

.macro	y_lt
	cpy :1
	bcc :2
.endm

.macro	y_ge
	cpy :1
	bcs :2
.endm

;check if A stands out of interval
.macro	a_out ' '
	a_lt :1 :3
	a_ge :2 :3
.endm

;compares A with operand and returnes lower value of those two in A
.macro	a_min ' '
	a_ge :1 _______x0
	jmp _______x1
_______x0	lda :1
_______x1		
.endm

;compares A with operand and returns higher value of those two in A
.macro	a_max ' '
	a_lt :1 _______x0
	jmp _______x1
_______x0	lda :1
_______x1	
.endm

;ckeckuje if A stands inside interval < >
.macro	a_in ' '
	a_ge :1 _______x0
	jmp _______x1
_______x0	cmp :2
	jeq :3
	a_lt :2 :3
_______x1
.endm	

.macro	a_lt ' '
	cmp :1
	jcc :2
.endm

.macro	a_lt2 ' '
	cmp :1
	jcc :2
.endm

.macro	a_ge ' '
	cmp :1
	jcs :2
.endm

.macro	a_ge2 ' '
	cmp :1
	jcs :2
.endm

.macro	pause ' '
	ift :1 == 0
	lda:cmp:req 20
	els
	lda 20
	add #:1
	cmp 20
	bne *-2
	eif
.endm

;guard if compiler reaches over given address
.macro guard
	ert *>=:1+1
.endm
